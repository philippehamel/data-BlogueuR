b <- function(y){
-90*y-24
}
d <- function(z){
(200*z^3)+(13*z)
}
ggplot(data.frame(x = 0), aes(x)) +
scale_x_continuous(limits = c(-1, 1)) +
stat_function(fun = b, geom = "line", color = "blue") +
stat_function(fun = a, geom = "line", color = "red") +
stat_function(fun = d, geom = "line", color = "green") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
library(ggplot2)
a <- function(x){
0.1^x
}
b <- function(y){
-90*y-24
}
d <- function(z){
(200*z^3)+(13*z)
}
ggplot(data.frame(x = 0), aes(x)) +
scale_x_continuous(limits = c(-1, 1)) +
stat_function(fun = b, geom = "line", color = "blue") +
stat_function(fun = a, geom = "line", color = "red") +
stat_function(fun = d, geom = "line", color = "green") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
library(ggplot2)
a <- function(x){
x^4
}
b <- function(y){
-90*y-24
}
d <- function(z){
(200*z^3)+(13*z)
}
ggplot(data.frame(x = 0), aes(x)) +
scale_x_continuous(limits = c(-1, 1)) +
stat_function(fun = b, geom = "line", color = "blue") +
stat_function(fun = a, geom = "line", color = "red") +
stat_function(fun = d, geom = "line", color = "green") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
library(ggplot2)
a <- function(x){
100*x^2
}
b <- function(y){
-90*y-24
}
d <- function(z){
(200*z^3)+(13*z)
}
ggplot(data.frame(x = 0), aes(x)) +
scale_x_continuous(limits = c(-1, 1)) +
stat_function(fun = b, geom = "line", color = "blue") +
stat_function(fun = a, geom = "line", color = "red") +
stat_function(fun = d, geom = "line", color = "green") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
library(ggplot2)
a <- function(x){
100*x^4
}
b <- function(y){
-90*y-24
}
d <- function(z){
(200*z^3)+(13*z)
}
ggplot(data.frame(x = 0), aes(x)) +
scale_x_continuous(limits = c(-1, 1)) +
stat_function(fun = b, geom = "line", color = "blue") +
stat_function(fun = a, geom = "line", color = "red") +
stat_function(fun = d, geom = "line", color = "green") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
library(ggplot2)
a <- function(x){
130*x^2
}
b <- function(y){
-90*y-24
}
d <- function(z){
(200*z^3)+(13*z)
}
ggplot(data.frame(x = 0), aes(x)) +
scale_x_continuous(limits = c(-1, 1)) +
stat_function(fun = b, geom = "line", color = "blue") +
stat_function(fun = a, geom = "line", color = "red") +
stat_function(fun = d, geom = "line", color = "green") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0)
p <- c(1,2,3,4)
str(p)
p
################################################# 16.1 SImple Linear Regression
require(UsingR)
require(ggplot2)
head(father.son)
ggplot(data = father.son, aes(x = fheight, y = sheight)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "fathers", y = "sons")
# This make for a great visualisation, but do not make the result avaible
heightsLM <- lm(sheight ~ fheight, data = father.son)
heightsLM
# To make avaible the standard errors
summary(heightsLM)
######################## 16.1.1 ANOVA Alternatives
require(reshape2)
require(plyr)
data(tips)
head(tips)
tipsAnova <- aov(tip ~ day - 1, data = tips)
tipsLM <- lm(tip ~ day -1, data = tips)
summary(tipsAnova)
summary(tipsLM)
# Both calculation ressemble one another, but there is a slight difference
# we can see by plotting both
# First calculate the means and CI manually
tipsByDay <- ddply(tips, "day", summarize,
tip.mean = mean(tip),
tip.sd = sd(tip),
Length = NROW(tip),
tfrac = qt(p = 0.90, df = Length - 1),
Lower = tip.mean - tfrac*tip.sd/sqrt(Length),
Upper = tip.mean + tfrac*tip.sd/sqrt(Length)
)
# Now extract them from the summary for tipsLM
tipsInfo <- summary(tipsLM)
tipsCoef <- as.data.frame(tipsInfo$coefficients[, 1:2])
tipsCoef <- within(tipsCoef, {
Lower <- Estimate - qt(p = 0.90, df = tipsInfo$df[2]) * `Std. Error`
Upper <- Estimate + qt(p = 0.90, df = tipsInfo$df[2]) * `Std. Error`
Day <- rownames(tipsCoef)
})
ggplot(data = tipsByDay, aes(x = tip.mean, y = day)) +
geom_point() +
geom_errorbarh(aes(xmin = Lower, xmax = Upper), height = 0.3) +
ggtitle("Calculated manually")
ggplot(data = tipsCoef, aes(x = Estimate, y = day)) +
geom_point() +
geom_errorbarh(aes(xmin = Lower, xmax = Upper), height = 0.3) +
ggtitle("Calculate by regression model")
View(tipsCoef)
ggplot(data = tipsCoef, aes(x = Estimate, y = Day)) +
geom_point() +
geom_errorbarh(aes(xmin = Lower, xmax = Upper), height = 0.3) +
ggtitle("Calculate by regression model")
housing <- read.table("http://www.jaredlander.com/data/housing.csv",
sep = ",", header = T, stringsAsFactors = F)
View(housing)
names(housing) <- c("Neighborhood", "Class", "Units", "YearBuilt",
"SqFt", "Income", "IncomeBySqFt", "Expense",
"ExpenseBySqFt", "NetIncome", "Value", "ValueBySqFt",
"Boro")
head(housing)
# Let's visualize
ggplot(data = housing, aes(x = ValueBySqFt)) +
geom_histogram(binwidth = 10) +
labs(x = "Value by square foot")
ggplot(data = housing, aes(x = ValueBySqFt, fill = Boro)) +
geom_histogram(binwidth = 10) +
labs(x = "Value per sqft")
ggplot(data = housing, aes(x = ValueBySqFt, fill = Boro)) +
geom_histogram(binwidth = 10) +
labs(x = "Value per SqFt") +
facet_wrap(~Boro)
ggplot(data = housing, aes(x = SqFt)) + geom_histogram()
ggplot(data = housing, aes(x = Units)) + geom_histogram()
ggplot(data = housing[housing$Units < 1000, ], aes(x = SqFt)) +
geom_histogram(binwidth = 30)
ggplot(data = housing[housing$Units <1000, ], aes(x = SqFt)) +
geom_histogram(binwidth = 30)
ggplot(data = housing[housing$Units < 1000, ], aes(x = SqFt)) +
geom_histogram()
ggplot(data = housing[housing$Units <1000, ], aes(x = SqFt)) +
geom_histogram()
ggplot(data = housing[housing$Units <1000, ], aes(x = Units)) +
geom_histogram()
ggplot(data = housing, aes(x = SqFt)) + geom_histogram()
ggplot(data = housing, aes(x = Units)) + geom_histogram()
ggplot(data = housing[housing$Units < 1000, ], aes(x = SqFt)) +
geom_histogram()
ggplot(data = housing[housing$Units <1000, ], aes(x = Units)) +
geom_histogram()
ggplot(data = housing, aes(x = SqFt, y = ValueBySqFt)) +
geom_point()
ggplot(data = housing[housing$Units < 1000, ], aes(x = SqFt, y = ValueBySqFt)) +
geom_point()
ggplot(data = housing, aes(x = Units, y = ValueBySqFt)) +
geom_point()
ggplot(data = housing[housing$Units < 1000, ], aes(x = Units, y = ValueBySqFt)) +
geom_point()
sum(housing[housing$Units < 1000, ])
sum(housing$Units < 1000)
sum(housing$Units > 1000)
housing <- housing[housing$Units < 1000, ]
ggplot(data = housing, aes(x = SqFt, y = ValueBySqFt)) +
geom_point()
ggplot(data = housing, aes(x = log(SqFt), y = ValueBySqFt)) +
geom_point()
ggplot(data = housing, aes(x = SqFt, y = log(ValueBySqFt))) +
geom_point()
ggplot(data = housing, aes(x = log(SqFt), y = log(ValueBySqFt))) +
geom_point
ggplot(data = housing, aes(x = log(SqFt), y = log(ValueBySqFt))) +
geom_point()
ggplot(data = housing, aes(x = Units, y = ValueBySqFt)) +
geom_point()
ggplot(data = housing, aes(x = log(Units), y = ValueBySqFt)) +
geom_point()
ggplot(data = housing, aes(x = Units, y = log(ValueBySqFt))) +
geom_point()
ggplot(data = housing, aes(x = log(Units), y = log(ValueBySqFt))) +
geom_point()
house1 <- lm(valueBySqFt ~ Units + SqFt + Boro, data = housing)
summary(house1)
house1 <- lm(ValueBySqFt ~ Units + SqFt + Boro, data = housing)
summary(house1)
house1$coefficients
coef(house1)
require(coefplot)
coefplot(house1)
install.packages("coefplot")
require(coefplot)
coefplot(house1)
house2 <- lm(ValueBySqFt ~ Units * SqFt + Boro, data = housing)
house3 <- lm(ValueBySqFt ~ Units:SqFt + Boro, data = housing)
coef(house2)
coef(house3)
coefplot(house2)
coefplot(house3)
house4 <- lm(ValueBySqFt ~ SqFt * Units * Income, data = housing)
ceofplot(house4)
coefplot(house4)
multiplot(house1, house2, house3)
housingnew <- read.table("http://www.jaredlander.com/data/housingNew.csv",
sep = ",", header = T, stringsAsFactors = F)
housePredict <- predict(house1, newdata = housingnew, se.fit = T,
interval = "prediction", level = 0.95)
head(housePredict$fit)
head(housePredict$se.fit)
search()
search(".GlobalEnv")
install.packages(c("DBI", "lattice", "Matrix", "Rcpp", "rgeos"))
library(ggmap)
library(ggthemes)
library(ggplot2)
library(gridExtra)
load(file = "data_transformed.Rdata")
wd()
getwd
setwd("/Users/philippehamel1/Desktop/Wolpertinger/Violence_Policiere_16-08-01")
load(file = "data_transformed.Rdata")
# Trouver et formater la carte
map <- map_data("state")
# Variable commune
data.pop.VP$state <- gsub("AL", "alabama", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AK", "alaska", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AZ", "arizona", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AR", "arkansas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CA", "california", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CO", "colorado", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CT", "connecticut", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("DE", "delaware", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("DC", "district of columbia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("FL", "florida", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("GA", "georgia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("HI", "Hawaii", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ID", "idaho", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IL", "illinois", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IN", "indiana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IA", "iowa", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("KS", "kansas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("KY", "kentucky", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("LA", "louisiana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ME", "maine", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MD", "maryland", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MA", "massachusetts", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MI", "michigan", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MN", "minnesota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MS", "mississippi", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MO", "missouri", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MT", "montana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NE", "nebraska", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NV", "nevada", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NH", "new hampshire", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NJ", "new jersey", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NM", "new mexico", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NY", "new york", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NC", "north carolina", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ND", "north dakota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OH", "ohio", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OK", "oklahoma", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OR", "oregon", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("PA", "pennsylvania", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("RI", "rhode island", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("SC", "south carolina", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("SD", "south dakota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("TN", "tennessee", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("TX", "texas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("UT", "utah", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("VT", "vermont", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("VA", "virginia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WA", "washington", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WV", "west virginia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WI", "wisconsin", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WY", "wyoming", data.pop.VP$state, fixed = TRUE)
colnames(data.pop.VP) <- c("region", "annee", "pop", "freq", "freq.rel")
############# Map
map.data <- merge(map, data.pop.VP)
carte.freq <- ggplot() +
geom_polygon(data = map.data, aes(x = long, y = lat, group = group, fill = freq),
color = "black") +
scale_fill_distiller(direction = 1) +
facet_wrap(~ annee) +
theme_nothing(legend = T) +
coord_map() +
ggtitle("Meutre commis par des policiers par État \n Fréquence absolue")
carte.freq
library(ggmap)
library(ggthemes)
library(ggplot2)
library(gridExtra)
load(file = "data_transformed.Rdata")
View(data.pop.VP)
tend.chrono <- ggplot(data = data.chrono, aes(x = Var1, y = Freq)) +
theme(axis.text.x = element_text(angle = 90)) + theme_hc() +
stat_smooth(method = "lm", se = F) +
geom_point() +
labs(title = "Meurtre par policier aux États-Unis\n de janvier 2013 à juin 2016",
x = "Date", y = "Fréquence")
tend.chrono
summary(data.chrono$Freq)
View(data.chrono)
map <- map_data("state")
# Variable commune
data.pop.VP$state <- gsub("AL", "alabama", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AK", "alaska", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AZ", "arizona", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AR", "arkansas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CA", "california", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CO", "colorado", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CT", "connecticut", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("DE", "delaware", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("DC", "district of columbia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("FL", "florida", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("GA", "georgia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("HI", "Hawaii", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ID", "idaho", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IL", "illinois", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IN", "indiana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IA", "iowa", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("KS", "kansas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("KY", "kentucky", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("LA", "louisiana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ME", "maine", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MD", "maryland", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MA", "massachusetts", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MI", "michigan", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MN", "minnesota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MS", "mississippi", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MO", "missouri", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MT", "montana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NE", "nebraska", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NV", "nevada", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NH", "new hampshire", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NJ", "new jersey", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NM", "new mexico", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NY", "new york", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NC", "north carolina", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ND", "north dakota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OH", "ohio", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OK", "oklahoma", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OR", "oregon", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("PA", "pennsylvania", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("RI", "rhode island", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("SC", "south carolina", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("SD", "south dakota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("TN", "tennessee", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("TX", "texas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("UT", "utah", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("VT", "vermont", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("VA", "virginia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WA", "washington", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WV", "west virginia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WI", "wisconsin", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WY", "wyoming", data.pop.VP$state, fixed = TRUE)
colnames(data.pop.VP) <- c("region", "annee", "pop", "freq", "freq.rel")
############# Map
map.data <- merge(map, data.pop.VP)
carte.freq <- ggplot() +
geom_polygon(data = map.data, aes(x = long, y = lat, group = group, fill = freq),
color = "black") +
scale_fill_distiller(direction = 1) +
facet_wrap(~ annee) +
theme_nothing(legend = T) +
coord_map() +
ggtitle("Meutre commis par des policiers par État \n Fréquence absolue")
carte.freq
summary(map.data)
View(data.light.VP)
load("~/Desktop/Wolpertinger/Violence_Policiere_16-08-01/data_transformed.Rdata")
View(data.chrono)
View(data.light.VP)
summary(data.light.VP)
View(data.chrono)
data.police.violence <- read.csv2(file = "MPVDatasetDownload.csv")
load("~/Desktop/Wolpertinger/Violence_Policiere_16-08-01/data_transformed.Rdata")
View(data.light.VP)
data.police.violence <- data.police.violence[ , 1:19]
data.police.violence$Date.of.injury.resulting.in.death..month.day.year. <-
as.POSIXct(data.police.violence$Date.of.injury.resulting.in.death..month.day.year.,
format = "%y-%m-%d")
data.police.violence <- data.police.violence[which(
data.police.violence$Date.of.injury.resulting.in.death..month.day.year. <="2016-06-30",
), ]
data.police.violence$Victim.s.age <-
as.numeric(levels(data.police.violence$Victim.s.age))[data.police.violence$Victim.s.age]
View(data.police.violence)
############################# Packaage
library(ggmap)
library(ggthemes)
library(ggplot2)
library(gridExtra)
############################# Importation
load(file = "data_transformed.Rdata")
############################# Graphique chrono
tend.chrono <- ggplot(data = data.chrono, aes(x = Var1, y = Freq)) +
theme(axis.text.x = element_text(angle = 90)) + theme_hc() +
stat_smooth(method = "lm", se = F) +
geom_point() +
labs(title = "Meurtre par policier aux États-Unis\n de janvier 2013 à juin 2016",
x = "Date", y = "Fréquence")
summary(data.chrono$Freq)
############################# Map des etats
# Trouver et formater la carte
map <- map_data("state")
# Variable commune
data.pop.VP$state <- gsub("AL", "alabama", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AK", "alaska", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AZ", "arizona", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("AR", "arkansas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CA", "california", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CO", "colorado", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("CT", "connecticut", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("DE", "delaware", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("DC", "district of columbia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("FL", "florida", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("GA", "georgia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("HI", "Hawaii", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ID", "idaho", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IL", "illinois", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IN", "indiana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("IA", "iowa", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("KS", "kansas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("KY", "kentucky", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("LA", "louisiana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ME", "maine", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MD", "maryland", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MA", "massachusetts", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MI", "michigan", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MN", "minnesota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MS", "mississippi", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MO", "missouri", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("MT", "montana", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NE", "nebraska", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NV", "nevada", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NH", "new hampshire", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NJ", "new jersey", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NM", "new mexico", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NY", "new york", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("NC", "north carolina", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("ND", "north dakota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OH", "ohio", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OK", "oklahoma", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("OR", "oregon", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("PA", "pennsylvania", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("RI", "rhode island", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("SC", "south carolina", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("SD", "south dakota", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("TN", "tennessee", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("TX", "texas", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("UT", "utah", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("VT", "vermont", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("VA", "virginia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WA", "washington", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WV", "west virginia", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WI", "wisconsin", data.pop.VP$state, fixed = TRUE)
data.pop.VP$state <- gsub("WY", "wyoming", data.pop.VP$state, fixed = TRUE)
colnames(data.pop.VP) <- c("region", "annee", "pop", "freq", "freq.rel")
View(map)
View(data.pop.VP)
summary(data.pop.VP)
sum(data.pop.VP$freq ~ data.pop.VP$annee)
aggregate(data.pop.VP$freq, by = list(data.pop.VP$annee))
aggregate(data.pop.VP$freq, by = list(data.pop.VP$annee), FUN = mean)
aggregate(data.pop.VP$freq, by = list(data.pop.VP$annee), FUN = sum)
mean(aggregate(data.pop.VP$freq, by = list(data.pop.VP$annee), FUN = sum))
mean((aggregate(data.pop.VP$freq, by = list(data.pop.VP$annee), FUN = sum))[ ,2])
View(data.chrono)
mean(data.chrono$Freq)
summary(data.chrono)
View(data.police.violence)
summary(data.police.violence$Victim.s.race)
