(BEV$Prix[which(ICE$Vehicule == "D")] - 80000) + ((BEV$Consommation[which(ICE$Vehicule == "D")] / 100) * Electricite) * x
}
func.E <- function(x){
(BEV$Prix[which(ICE$Vehicule == "E")] - 80000) + ((BEV$Consommation[which(ICE$Vehicule == "E")] / 100) * Electricite) * x
}
func.F <- function(x){
(BEV$Prix[which(ICE$Vehicule == "F")] - 80000) + ((BEV$Consommation[which(ICE$Vehicule == "F")] / 100) * Electricite) * x
}
(BEV$Prix[which(ICE$Vehicule == "D")] - 80000) + ((BEV$Consommation[which(ICE$Vehicule == "D")] / 100) * Electricite) * 100000
(BEV$Prix[which(ICE$Vehicule == "D")] - 80000)
# Fonction pour BEV vs ICE
setwd("/Volumes/USB/MTQ/Web_App/BEV_vs_ICE")
BEV <- read.csv2(file = "BEV.csv")
ICE <- read.csv2(file = "ICE.csv")
Essence <- 1.1
Electricite <- 0.0098
#################################################
#                Fonction ICE                   #
#################################################
func.A <- function(x){
ICE$Prix[which(ICE$Vehicule == "A")] + ((ICE$Consommation[which(ICE$Vehicule == "A")] / 100) * Essence) * x
}
func.B <- function(x){
ICE$Prix[which(ICE$Vehicule == "B")] + ((ICE$Consommation[which(ICE$Vehicule == "B")] / 100) * Essence) * x
}
func.C <- function(x){
ICE$Prix[which(ICE$Vehicule == "C")] + ((ICE$Consommation[which(ICE$Vehicule == "C")] / 100) * Essence) * x
}
#################################################
#                Fonction BEV                   #
#################################################
func.D <- function(x){
(BEV$Prix[which(BEV$Vehicule == "D")] - 80000) + ((BEV$Consommation[which(BEV$Vehicule == "D")] / 100) * Electricite) * x
}
func.E <- function(x){
(BEV$Prix[which(BEV$Vehicule == "E")] - 80000) + ((BEV$Consommation[which(BEV$Vehicule == "E")] / 100) * Electricite) * x
}
func.F <- function(x){
(BEV$Prix[which(BEV$Vehicule == "F")] - 80000) + ((BEV$Consommation[which(BEV$Vehicule == "F")] / 100) * Electricite) * x
}
func.F(100000)
(BEV$Prix[which(BEV$Vehicule == "F")] - 80000)
func.D <- function(x){
(BEV$Prix[which(BEV$Vehicule == "D")] - 8000) + ((BEV$Consommation[which(BEV$Vehicule == "D")] / 100) * Electricite) * x
}
func.E <- function(x){
(BEV$Prix[which(BEV$Vehicule == "E")] - 8000) + ((BEV$Consommation[which(BEV$Vehicule == "E")] / 100) * Electricite) * x
}
func.F <- function(x){
(BEV$Prix[which(BEV$Vehicule == "F")] - 8000) + ((BEV$Consommation[which(BEV$Vehicule == "F")] / 100) * Electricite) * x
}
func.F(100000)
rm(list = ls())
source(./fonction.R)
source("./fonction.R")
library(shiny)
library(ggplot2)
shiny::runApp('/Volumes/USB/MTQ/Web_App/Shiny_ex/BMI_exemple')
rm(list = ls())
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
titlePanel("Quelle est le coût total de possession d'un véhicule électrique et d'un véhicule à combustion interne.")
sidebarLayout(sidebarPanel(
helpText("Voici comment l'application calcul le coût total d'une voiture sur son cycle de vie en
fonction du nombre de kilomètre que vous pensez faire, le prix de l'essence, le prix de
l'électricité et les modèle que vous désirez comparer.")
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C"),
),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F"))
))
)
server <- function(input, output) {
}
runApp(ui = ui, server = server)
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
titlePanel("Quelle est le coût total de possession d'un véhicule électrique et d'un véhicule à combustion interne."),
sidebarLayout(sidebarPanel(
helpText("Voici comment l'application calcul le coût total d'une voiture sur son cycle de vie en
fonction du nombre de kilomètre que vous pensez faire, le prix de l'essence, le prix de
l'électricité et les modèle que vous désirez comparer.")
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C"),
),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F"))
))
)
server <- function(input, output) {
}
runApp(ui = ui, server = server)
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
titlePanel("Quelle est le coût total de possession d'un véhicule électrique et d'un véhicule à combustion interne."),
sidebarLayout(sidebarPanel(
helpText("Voici comment l'application calcul le coût total d'une voiture sur son cycle de vie en
fonction du nombre de kilomètre que vous pensez faire, le prix de l'essence, le prix de
l'électricité et les modèle que vous désirez comparer."),
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")
),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")
)
))
)
server <- function(input, output) {
}
runApp(ui = ui, server = server)
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
titlePanel("Quelle est le coût total de possession d'un véhicule électrique et d'un véhicule à combustion interne."),
sidebarLayout(sidebarPanel(
helpText("Voici comment l'application calcul le coût total d'une voiture sur son cycle de vie en
fonction du nombre de kilomètre que vous pensez faire, le prix de l'essence, le prix de
l'électricité et les modèle que vous désirez comparer."),
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")
),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")
),
),
mainPanel(
uiOutput("graph")
)))
server <- function(input, output) {
}
runApp(ui = ui, server = server)
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
titlePanel("Quelle est le coût total de possession d'un véhicule électrique et d'un véhicule à combustion interne."),
sidebarLayout(
helpText("Voici comment l'application calcul le coût total d'une voiture sur son cycle de vie en
fonction du nombre de kilomètre que vous pensez faire, le prix de l'essence, le prix de
l'électricité et les modèle que vous désirez comparer."),
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")
),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")
))
server <- function(input, output) {
}
runApp(ui = ui, server = server)
shiny::runApp('/Volumes/USB/MTQ/Web_App/Shiny_ex')
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")),
numericInput(inputId = "Essence",
label = "Prix de l'essence par litre",
value = 0.9),
numericInput(inputId = "Electricite",
label = "Prix de l'électricité par kW/h",
value = 0.0998),
plotOutput(outputId = "graph")
)
server <- function(input, output) {
}
runApp(ui = ui, server = server)
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")),
numericInput(inputId = "Essence",
label = "Prix de l'essence par litre",
value = 0.9),
numericInput(inputId = "Electricite",
label = "Prix de l'électricité par kW/h",
value = 0.0998),
plotOutput(outputId = "graph")
)
server <- function(input, output) {
output$graph <- renderPlot({
ggplot(data = data.frame(x = 0), aes(x)) +
xlim(0, 500000) +
ylim(0, 200000) +
stat_function(fun = input$ICE, geom = "line", color = "blue") +
stat_function(fun = input$BEV, geom = "line", color = "green")
})
}
runApp(ui = ui, server = server)
rm(list = ls())
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")),
numericInput(inputId = "Essence",
label = "Prix de l'essence par litre",
value = 0.9),
numericInput(inputId = "Electricite",
label = "Prix de l'électricité par kW/h",
value = 0.0998),
plotOutput(outputId = "graph")
)
server <- function(input, output) {
output$graph <- renderPlot({
ggplot(data = data.frame(x = 0), aes(x)) +
xlim(0, 500000) +
ylim(0, 200000) +
stat_function(fun = input$ICE, geom = "line", color = "blue") +
stat_function(fun = input$BEV, geom = "line", color = "green")
})
}
runApp(ui = ui, server = server)
# Maquette BEV vs ICE
library(shiny)
library(ggplot2)
source("./fonction.R")
ui <- fluidPage(
selectInput(inputId = "ICE",
label = "Modèle à combustion interne :",
choices = c("A" = "func.A",
"B" = "func.B",
"C" = "func.C")),
selectInput(inputId = "BEV",
label = "Modèle électrique :",
choices = c("D" = "func.D",
"E" = "func.E",
"F" = "func.F")),
numericInput(inputId = "Essence",
label = "Prix de l'essence par litre",
value = 0.9),
numericInput(inputId = "Electricite",
label = "Prix de l'électricité par kW/h",
value = 0.0998),
plotOutput(outputId = "graph")
)
server <- function(input, output) {
output$graph <- renderPlot({
func.A <- function(x){
ICE$Prix[which(ICE$Vehicule == "A")] + ((ICE$Consommation[which(ICE$Vehicule == "A")] / 100) * input$Essence) * x
}
func.B <- function(x){
ICE$Prix[which(ICE$Vehicule == "B")] + ((ICE$Consommation[which(ICE$Vehicule == "B")] / 100) * input$Essence) * x
}
func.C <- function(x){
ICE$Prix[which(ICE$Vehicule == "C")] + ((ICE$Consommation[which(ICE$Vehicule == "C")] / 100) * input$Essence) * x
}
#################################################
#                Fonction BEV                   #
#################################################
func.D <- function(x){
(BEV$Prix[which(BEV$Vehicule == "D")] - 8000) + ((BEV$Consommation[which(BEV$Vehicule == "D")] / 100) * input$Electricite) * x
}
func.E <- function(x){
(BEV$Prix[which(BEV$Vehicule == "E")] - 8000) + ((BEV$Consommation[which(BEV$Vehicule == "E")] / 100) * input$Electricite) * x
}
func.F <- function(x){
(BEV$Prix[which(BEV$Vehicule == "F")] - 8000) + ((BEV$Consommation[which(BEV$Vehicule == "F")] / 100) * input$Electricite) * x
}
ggplot(data = data.frame(x = 0), aes(x)) +
xlim(0, 500000) +
ylim(0, 200000) +
stat_function(fun = input$ICE, geom = "line", color = "blue") +
stat_function(fun = input$BEV, geom = "line", color = "green")
})
}
runApp(ui = ui, server = server)
ICE <- read.csv2(file = "/Volumes/USB/MTQ/Web_App/BEV_vs_ICE/ICE.csv")
rm(list = ls())
ICE <- read.csv2(file = "/Volumes/USB/MTQ/Web_App/BEV_vs_ICE/ICE.csv")
View(ICE)
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
input$Model.ICE
shiny::runApp('/Volumes/USB/MTQ/Web_App/Shiny_ex')
input$num
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App/Shiny_ex')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App')
rm(list = ls())
shiny::runApp('/Volumes/USB/MTQ/Web_App')
shiny::runApp('/Volumes/USB/MTQ/Web_App/Shiny_ex/BMI_exemple')
shiny::runApp()
rm(list = ls())
shiny::runApp()
shiny::runApp()
<<diamonds-model>>=
#load ggplot
require(ggplot2)
#load and view the diamond data
data(diamonds)
head(diamonds)
#fit the model
mod1 <- lm(price ~ carat + cut, data = diamonds)
#view a summary
summary(mod1)
@
install.packages("knit")
install.packages("knitr")
<<diamonds-model>>=
#load ggplot
require(ggplot2)
#load and view the diamond data
data(diamonds)
head(diamonds)
#fit the model
mod1 <- lm(price ~ carat + cut, data = diamonds)
#view a summary
summary(mod1)
@
---
title: "TP1"
output: pdf_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
load("~/Desktop/École/Université/Maitrise/Macroéconomie/TP1/data/CleanDataWide.rdata")
require(reshape2)
require(ggplot2)
data.long <- melt(data = data.wide)
View(data.wide)
View(data.long)
data.long <- melt(data = data.wide, id = c("period"))
View(data.wide)
View(data.long)
ggplot(data = data.long) +
geom_line(aes(x = "period", y = "value"), by = "variable")
ggplot(data = data.long) +
geom_line(aes(x = "period", y = "value", by = "variable"))
ggplot(data = data.long) +
geom_path(aes(y = "value", by = "variable"))
data.long$period <- as.POSIXct(x = data.long$period)
ggplot(data = data.long) +
geom_path(aes(x= "period", y = "value", by = "variable"))
ggplot(data = data.long) +
geom_path(aes(x= "period", y = "value", color = "variable"))
ggplot(data = data.long) +
geom_path(aes(x= period, y = value, color = variable))
ggplot(data = data.long) +
geom_path(aes(x= period, y = log(value), color = variable))
ggplot(data = data.long) +
geom_path(aes(x= period, y = value, color = variable))
View(data.wide)
ggplot(data = data.long) +
geom_path(aes(x= period, y = value[data.long$variable == "job"], color = variable))
ggplot(data = data.long[data.long$variable == "job"]) +
geom_path(aes(x= period, y = value, color = variable))
ggplot(data = data.long[data.long$variable == "job", ]) +
geom_path(aes(x= period, y = value, color = variable))
ggplot(data = data.long) +
geom_path(aes(x= period, y = value, color = variable))
PIB <- hpfilter(x = log(data.wide$pib.real), type = "lambda", freq = 1600)
require(mFilter)
load(file = "./data/CleanDataWide.rdata")
install.packages(c("servr", "knitr"), repos = "http://cran.rstudio.com")
?servr::jekyll
y <- sample(x = 1:100, size = 100, replace = T)
x <- rep(x = 5, times = 100)
data <- cbind(x, y)
View(data)
require(ggplot2)
plot <- ggplot(data = data, aes(x = data, y = y)) +
geom_point()
data <- as.data.frame(data)
View(data)
plot<- ggplot(data = data, aes(x = x, y = y)) +
geom_point()
plot
reg <- lm(formula = y ~ x, data = data
)
summary(reg)
plot + geom_line(methods = "lm")
plot + geom_smooth(method = lm)
plot + abline(lm(y ~ x, data = data))
plot
read.csv(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey")
read.csv(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey", header = T,)
read.csv2(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey", header = T, )
read.csv(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey/StarWars.csv", header = T)
read.csv(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey/StarWars.csv")
read.csv2(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey/StarWars.csv")
read.csv(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey/StarWars.csv",
header = T,
sep = ","
)
read.csv(file = "/Users/philippehamel1/Desktop/Blog/data538/star-wars-survey/StarWars.csv",
header = T,
sep = ",",
stringsAsFactors = T
)
sparkR.session()
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/home/spark")
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
install.packages(c("acepack", "cluster", "codetools", "colorspace", "cowplot", "curl", "evaluate", "foreign", "jsonlite", "lubridate", "mgcv", "plotly", "R6", "reshape", "reshape2", "rgeos", "RgoogleMaps", "rmarkdown", "RXKCD", "shiny", "stringi"))
library(RCurl)
x <- getURL("https://raw.github.com/philippehamel/data-BlogueuR/blob/master/Carte/BorneCE_16-09.rdata")
y <- load(x)
install.packages("RCurl")
library(RCurl)
x <- getURL("https://raw.github.com/philippehamel/data-BlogueuR/blob/master/Carte/BorneCE_16-09.rdata")
y <- load(x)
setwd("/Users/philippehamel1/Desktop/Blog/data-BlogueuR/Carte")
BorneCE_16-09 <- load(BorneCE_16-09.rdata)
BorneCE_16-09 <- load("BorneCE_16-09.rdata")
BorneCE <- load("BorneCE_16-09.rdata")
load("BorneCE_16-09.rdata")
View(Borne)
write.csv(Borne, file = "BorneCE_16-09.csv")
library(RCurl)
x <- getURL("https://raw.github.com/philippehamel/data-BlogueuR/blob/master/Carte/BorneCE_16-09.rdata")
y <- read.csv(text = x)
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/philippehamel/data-BlogueuR/master/Carte/BorneCE_16-09.csv")
y <- read.csv(text = x)
View(y)
View(y)
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/philippehamel/data-BlogueuR/master/Carte/BorneCE_16-09.csv")
Borne <- read.csv(text = x)[Borne$Adresse.Province == "QC", ]
head(Borne)
rm(list = ls())
servr::jekyll()
